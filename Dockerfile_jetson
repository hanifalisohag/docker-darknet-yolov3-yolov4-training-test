FROM nvcr.io/nvidia/l4t-base:r32.5.0
LABEL maintainer "Md Hanif Ali Sohag <hanifalisohag@gmail.com>"
# OS/Version (FILE): cat /etc/issue.net
ARG DEBIAN_FRONTEND=noninteractive

# System update
RUN apt-get clean && apt-get update && apt-get install -y --no-install-recommends\
        build-essential \
        cmake \
        git \
        wget \
        unzip \
        yasm \
        pkg-config \
        libtool \
        nasm \
        automake \
        libpng-dev \
        libjpeg-turbo8-dev \
        libssl-dev \
        liblapack-dev \
        libatlas-base-dev \
        python3.7 \
        python3.7-dev \
        python3-distutils \
        libpython3-dev \
        python3-pip \
        python3-numpy \
        libeigen3-dev \
        libjpeg-dev \
        python3-setuptools \
	libxmu-dev \
	libxi-dev \
        python3-zmq \
        python3-protobuf \
        gnupg1 gnupg2 \
	libgtk-3-dev \
    	libavcodec-dev \
	libavformat-dev \
	libswscale-dev \
	libv4l-dev \
	libxvidcore-dev \
	libx264-dev \
	libtiff-dev \
 && rm -rf /var/lib/apt/lists/*

COPY ./trusted.gpg /etc/apt/
COPY ./jetson-ota-public.asc /etc/apt/trusted.gpg.d/
RUN apt-key add /etc/apt/trusted.gpg && apt-key add /etc/apt/trusted.gpg.d/jetson-ota-public.asc
COPY ./nvidia-l4t-apt-source.list /etc/apt/sources.list.d/

RUN apt-get clean && apt-get update && apt upgrade -y && apt-get install -y --no-install-recommends\
	libcudnn8 \
	libcudnn8-dev \
	libcublas-dev \
	cuda-cufft-dev-10-2 \
    cuda-npp-dev-10-2 \
    cuda-nvcc-10-2 \
    libcublas-dev \
    cuda-compiler-10-2 \
    cuda-cudart-dev-10-2 \
    cuda-cupti-dev-10-2 \
    cuda-curand-dev-10-2 \
    cuda-cusolver-dev-10-2 \
    cuda-cusparse-dev-10-2 \
    cuda-libraries-dev-10-2 \
    cuda-misc-headers-10-2 \
    cuda-nvml-dev-10-2

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

#Getting OpenCV
RUN mkdir /opencv_build
WORKDIR  /opencv_build
RUN git clone https://github.com/opencv/opencv.git

#Compiling OpenCV
RUN mkdir /opencv_build/opencv/build
WORKDIR  /opencv_build/opencv/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_C_EXAMPLES=ON \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D BUILD_EXAMPLES=ON ..

RUN make -j$(cat /proc/cpuinfo | grep processor | wc -l)
RUN make install

#Getting YOLOv4/YOLOv3 
WORKDIR  /
RUN git clone https://github.com/AlexeyAB/darknet.git
WORKDIR  /darknet
#Update Makefile
RUN sed -i '1 s/GPU=0/GPU=1/' Makefile
RUN sed -i '2 s/CUDNN=0/CUDNN=1/' Makefile
RUN sed -i '3 s/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile
RUN sed -i '4 s/OPENCV=0/OPENCV=1/' Makefile

WORKDIR  /darknet
RUN wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137
RUN wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights
RUN wget https://pjreddie.com/media/files/darknet53.conv.74
RUN wget https://pjreddie.com/media/files/yolov3.weights

#Compiling Darknet (You Need to Run this make inside the docker since the build needs NVIDIA GPU which is only possible by passing --runtime=nvidia)
#docker run -it --runtime=nvidia docker-darknet_yolo:latest
#RUN make
